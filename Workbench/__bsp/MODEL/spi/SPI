/**
  ****************************************************************************
  * 
  * 2018.10.30
  * @freeysh
  */
void spi1_configure(void)
{
	/* rcc_configure(); */
	/* gpio_configure(); */

	
}

###############################################################################
##### SPI 主模式通信配置
下面配置中，MOSI引脚是数据输出，而 MISO是数据输入
1. 设置 SPI_CR1寄存器的 BR[2:0]位定义串行时钟的波特率
2. 选择 CPOL和CPHA位，定义数据传输和串行时钟间的相位关系
3. 设置 DFF位，来定义8位或16位数据帧格式
4. 设置 SPI_CR1寄存器的 LSBFRIST位来定义帧格式
5. 如果 NSS引脚需要工作在输入模式，硬件模式中在整个数据帧传输
   期间应把 NSS引脚连接到高电平；
   在软件模式中，需要设置 SPI_CR1寄存器中的 SSM和SSI位；
   如果 NSS引脚工作在输出模式，则只需要设置 SSON位。
6. 必须设置 MSTR和SPE位(只当 NSS引脚被连接到高电平，这些位才能保持置位)



##### 数据发送
1. 当一个字节写入发送缓冲器时，发送过程开始
2. 在发送第一个数据位时，数据字被并行地(通过内部总线)传入移位寄存器，
   而后串行地移出到 MOSI引脚上； MSB在先还是LSB在先，
   取决于 SPI_CR1寄存器中的 LSBFIRST位。
   数据从发送缓冲器传输到移位寄存器时 TXE标志将被置位，如果设置了
   SPI_CR1寄存器中的 TXEIE位，将产生中断
3. 在试图写发送缓冲器之前，需要确认 TXE标志应该是 1.


##### 接收过程

1. 移位寄存器里的数据传送到接收缓冲器中，并且 RXNE标志被置位.
   如果 SPI_CR2寄存器中的 RXEIE位被设置，则产生中断
2. 读 SPI_DR寄存器时，SPI设备返回接收到的数据字。
   读 SPI_DR寄存器将清除 RXNE位.


###############################################################################   

###############################################################################
SPI 是一个全双工同步串行接口。
只能是一个主机(作为主机 SS = 1)，可以有多个从机
在数据传输过程中，总线上只能是一个主机和一个从机进行通信。

1. MISO (Master IN Slave Out)	主机输入，从机输出信号
2. MOSI (Master Out Slave In)	主机输出，从机输入信号
3. SCL  (Serial Clock)		串行同步时钟
4. SS   (Slave Select)		从机选择信号，低电平有效

注意：stm32_SPI接口的 NSS引脚可以使用软件来编程。


##### 时钟相位和极性
1. CPOL 决定时钟脉冲SCK 的有效脉冲方式(正脉冲，负脉冲)	时钟极性
2. CPHA 决定数据线(MOSI, MISO)什么时候输出数据和采集数据	时钟相位

##### 数据通信格式
1. 根据 SPI_CR1寄存器中的 LSBFIRST位，输出数据位是 MSB还是LSB。
2. 根据 SPI_CR1寄存器中的 DFF位，每个数据帧可以是 8 位， 或 16 位。
###############################################################################
