### =========================================================== 批处理文件
### 借肋find的“壳”功能去遍历目录，对遍历到的每个符合条件的文件执行grep命令
### 缺点：效率低，因为每个命中的对象都需在执行grep命令，
### 创建一个进程，完成任务后进程消亡，然后再创建，再消亡，....。
% find src -name \*.c -exec grep -n -- --help {} /dev/null \;

### 命令xargs可以用来完成这个工作：
### xargs命令把标准输入追加到它的参数列表后面，也就是下面grep...的后面，
### 再作为一个命令来执行。这样利用find精确筛选，利用grep批量处理文件，提高效率。
% find src -name \*.c -print | xargs grep -n -- --help


### =========================================  将标准输入组织成命令执行,xargs
### 将标准输入构造为命令的命令行参数
### 如果标准输入的数据量很大，xargs指定的批处理程序会启动多个进程运行，
### 每个进程会处理一批，会是几千个参数(命令行参数占满128K字节)
### 可以使用xargs的 -n选项，指定每批处理多少个
### xargs经常与find配合使用，也可以与其它命令组合使用
_____________________________________________________
### 解决shell文件名生成是，因为文件太多，缓冲区空间受限而文件名展开失败的问题
### rm -f *.dat 文件名*.dat展开失败，可以使用下面的命令
% ls | grep ".dat$" | xargs rm -f

### find命中目录名因删除目录导致目录遍历过程遇到麻烦
% find . -name CVS -exec rm -rf {} \;
改为：
% find . -name CVS -print | xargs rm -rf



### ==================================================== 命令行参数的3种风格
___________________________________________________________
### 类似dd命令的风格
### 特点：命令行参数采用 param=value 的风格
% dd if=sysdisk.img of=/dev/sdb


___________________________________________________________
### 类似find和gcc的风格
### 特点：以减号开头的一个若多个字符构成的单词用作选项
### 将所有扩展名 .c的普通文件由Windows文本格式 转为Linux格式 
% find src -name '*.c' -type f -exec dos2unix --keepdate {} \;

### 编译C语言源程序文件mytest.c并生成 C程序怀汇编代码的对比
% gcc -O0 -Wall -g -masm=intel -Wa,-ahl -c mytest.c


___________________________________________________________
### 类似ls和grep的风格：现今流行的格式 
### 特点：长选项与短选项，有的选项同时有两种格式，
###       也有的选项仅有长格式或仅有短格式 
### 例如：ls -w,指定一个整数参数值告知ls排版时屏幕的列宽度
% ls --classify --all --size --human-readable --width=80 /home/ysh #长选项
% ls -Fashw80 /home/ysh                 #多个选项挤在一起
% ls -F -a -s -h -w 80 /home/ysh        #多个选项分开
% ls -F -w80 /home/ysh -has             #可以把选项放到后面



################################################################################



