### ===========================================================================CUT
cut	选项	文件名                                                             　　
-d "分隔符"	按照指定的分割符分割
-f 列号		提取第几列
例如:　cut -d ":' -f 1-3 /etc/passwd
### ===========================================================================AWK
awk '条件类型1{动作1}条件类型2{动作2}......' 文件名                            

cat /etc/passwd | awk '{FS=":"} $3<10 {print $1 "\t" $3}'
cat /etc/passwd | awk 'BEGIN{FS=":"} $3<10 {print $1 "\t" $3}'
awk 'END{print "end of file"}{print $3}' /etc/passwd
df -h | grep sda3 | awk '{print $5}' | cut -d "%" -f 1
FS 为分割字元, 默认值是空格键[FS内置变量,指定分割符]
条件，一般使用关系表达式作为条件，>, <, >=, <=, ==, !=
echo 1234567890 > test		覆盖方式
echo 1234567890 >> test		追加方式

___________________________________________________________
awk -F: '{print $(NF)}' /etc/passwd
awk -F: '{print $(NF-1}' /etc/passwd
awk -F: '{print $1,$NF}' /etc/passwd | head -5
awk -F: '{printf $1"---"$NF}' /etc/passwd | head -5
ifconfig | grep "inet addr:" | grep -v "127" | awk '{print $2}' | awk -F"addr:" '{print $2}' | awk -F. '{print $1"-"$2"-"$3"-"$4}'
___________________________________________________________

#"FS"为awk内置命令; ":"代表分割符;
#"print"代表打印输出;"$"代表打印的位置参数
#"i"代表加一计数变量
#"/etc/passwd"代表要处理的内容

AWK语法:
                            #","代表输出字段分割符,
                                它映射为"OFS"变量;
                                "OFS"变量的默认值为:空格
                             |
awk ' BEGIN{FS=":"} {print $1,$3; i++} END{print "count:"i} ' /etc/passwd

___________________________________________________________ 
    前段                中间处理段              后段
___________________________________________________________    
 
#"OFS"定义输出字段分割符 与 "," 配合使用[ awk内置命令 ] 
awk -F: ' BEGIN{OFS="---"} {print $1,$3} ' /etc/passwd
   
___________________________________________________________   
#"/ /"代表整则表达是;"root"代表要第一行要匹配的内容    
#"-F"定义输出字段分割符[ -F"/" ]     
awk -F: '/root/{print $1}' /etc/passwd    
___________________________________________________________
awk:逐行扫描进行文本处理的一门语言
a.w.k分别为该程序的三位设计者姓氏的第一个字母
用法
		awk '程序' 文件名列表
		awk -f 程序文件名 文件名列表
		程序 条件{动作}
		awk自动对每行文本执行条件判断,满足条件执行动作 (内置循环)
		允许多段程序:多段程序间用空格或分号隔开		
处理方式
	输入文件的每行作为一个“记录”,变量NR就是行号
	每行用空格分隔开的部分,叫做记录的“域”
	内置变量$1是第1域内容,依次,$2是第2域内容,......
	特别的,$0指的是整个这一行的内容
	awk的处理为:符合条件的行,执行相应的动作
___________________________________________________________
awk描述条件的方法
使用与C语言类似的关系算符
	<小于	!= 不等于	<= 小于或等于	> 大于
	==等于	>=大于或等于

使用与C语言类似的逻辑算符
	||条件或		&&条件与		!条件非

正则表达式的模式匹配 /regexpr/
	包含该模式的行,执行动作

特殊的条件
	不指定任何条件,对所有文本行执行动作
	BEGIN	开始处理所有文本行之前执行动作
	END		处理完所有文本行之后执行动作
___________________________________________________________
awk描述动作的方法
描述“动作”时,简单的用法有:
自定义变量
加减乘除等算术逻辑运算
正则表达式匹配运算符(用作条件判断)	~	!~
例如: $2 ~ "[1-9][0-9]*"

___________________________________________________________
流程控制(与C语言类似)
	条件判断 if
	循环控制 for

print 变量1, 变量2,......
printf(”格式串”,变量1,变量2,......)
ps -ef | grep guest
ps -ef | awk ' /guest/{ printf("%s ",$2); }‘

awk '{printf("%d: %s\n",NR,$0); }' test.c

date | awk '{print $4}'

ls -s | awk '$1 > 2000 { print $2 }'




















