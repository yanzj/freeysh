### =================================================================
正则表达式，又称规则表达式。
Regular Expression，在代码中常简写为regex、regexp或RE，计算机科学的一个概念。
正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本
=====================================================================
.       匹配除了换行符外的任意 1个字符
*       表示前面1个字符匹配0次或任意多次(aa* 匹配一个a)

\       转义字符
?       表示前面1个字符匹配0次或1次
+       表示前面1个字符匹配1次或任意多次
|       表示或关系

[]      匹配中括号中任意 1个字符
[^ ]    匹配除中括号指定的任意 1个字符([^0-9])

\{n\}   表示其前面字符正好出现n次
        [0-9]\{4\} 匹配4位数字
\{n,\}  表示其前面数字出现不小于n次
        [0-9]\{2,\} 匹配2位以上数字
\{n,m\} 表示其前面字符出现至少n次，最多出现m次
        [a-z]\{6,8\} 匹配6到8位小写字母



### =================================================================
位置锚定：
^               匹配行首.例如: ^hello 匹配以hello开头的行
$               匹配行尾.例如: hello$ 匹配以hello结尾的行
^$              匹配空行
^[[:space:]]*$  就是匹配N个空格，所以就是空白行 
\<              词首锚定，用于单词模式的左侧
\>              词尾锚定，用于单词模式的右侧
\<PATTERN\>     单词锚定，匹配整个单词，用于单词两侧。



### =================================================================
分组机制：
\(\)    将一个或多个字符捆绑在一起，当做一个整体时行处理。
后向引用：引用前面分组括号中的模式所匹配到的字符(而不是模式本身)
Note：分组括号中的模式所匹配到的内容会被正则表左式引擎记录于内部变量中，
      这些变量的命明方式为：\1, \2, \3, ...




### ================================================================= 
bash 特殊符号 

\       转义符
|       管道符
;       连续命令分割符
$       调用变量的值
&       工作台控制(job control),将命令放入后台执行
/       路径分割符
> >>    文件输出重定向,分别代表 覆盖和追加
< <<    文件输入重定向,分别代表 覆盖和追加
' '     单引号,不具备变量置换功能(单引号会把里面的内容原样输出)
" "     双引号,具有变量置换功能, $可保留相关功能
` `     反引号,它的中间为可执行指令.
$()     与反引号功能一样,用于调用系统命令
{}      中间为命令块的组合.
()      中间为 shell 的起始和结束
~       使用者的家目錄
!       邏輯運算意義上的『非』 not 的意思！



