### ===========================================================================
指针和二维数组之间的关系

换个角度看二维数组
int a[2][3];
a[i][j]
*(*(a+i)+j)

a=======&a[0]--->   &a[0][0] /{a[0][0], a[0][1], a[0][2]}

(a+1)===&a[1]--->   &a[1][0] /{a[1][0], a[1][1], a[1][2]}

a   代表二维数组的首地址,第0行的地址,行地址
a+i 代表第 i 行的地址, 但并非增加 i 个字节!

1)a包含2个元素a[0],a[1]
2)a[0],a[1]又分别是一个, 一维数组,包含3个元素



### ===========================================================================
指向二维数组的行指针
将二维数组a看成一维数组,有2个“int[3]型”元素
int a[2][3];
*(*(p+i)+j)

若要让一个指针指向它,则应定义为
    int (*p)[3];//行指针,基类型“int[3]型”
    p = a;      //&a[0]指向第0行的“int[3]型”元素


        p+i 指向第i行的“int[3]型”元素,即&a[i]
        *(p+i),即a[i],第i行的数组名,即指向第i行第0列的int型元素
        *(p+i)+j 指向第i行第j列的int型元素
        *(*(p+i)+j) 取出第i行第j列的内容(int型元素的值),即a[i][j]



### ===========================================================================
按行指针访问二维数组元素
int a[2][3];
int (*P)[3];
p = a;
for (i=0; i<m; i++) //行下标变化
{
    for (j=0; j<n; j++)//列下标变化
    {
        printf("%d", *(*(p+i)+j));
    }
}


### ===========================================================================
再换一个角度看二维数组, int a[2][3];
将二维数组a看成一维数组,有6个int型元素

若要让一个指针指向它,则应定义为
int *p;         //列指针,基类型是int型
p = a[0];       //*(a+0)+0即&a[0][0],指向第0行第0列的int型元素

按列指针访问二维数组元素, 根据相对偏移量逐列查找
int *p;
p = &a[0][0];
for (i=0; i<m; i++)
{
    for (j=0; j<n; j++)
        printf("%d", *(p+i*n+j));
}

*(p+i*n+j) == p[i*n+j]



### ===========================================================================


