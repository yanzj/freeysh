### ===========================================================================
类型定义
typedef struct Node
{
    ElemType elem;
    struct Node *next;
}Node,*Ptr;
typedef Ptr *SqListPtr;


### ===========================================================================
变量定义和使用
Node n1, n2;        /* 定义2个结点变量*/

Ptr p = &n1;        /* 定义一个指向结点的指针变量p, 并存放n1的地址(指针) */
n1.next=&n2;        /* 结点n1的指针域存放结点n2的地址*/

SqListPtr L=p;      /* 定义一个单链表L */
N2.next=NULL;



### ===========================================================================
三、单链表基本操作及实现
1查找——按位置查找
• 问题:在给定的带头结点的单链表L中,查找指定位
    置的数据元素,如果存在,则返回scuccess,同时取
    回相应结点的数据
    
• 方法:链表的操作只能通过从头指针出发,顺着链域
    next逐个结点比较,直到搜索到指定位置的结点为止
    
    在单链表中获取第pos个元素:
List_Retrieve(SqListPtr L, int pos, ElemType *elem)



### ===========================================================================
1 查找——按位置查找
Status List_Retrieve(SqListPtr L, int pos, ElemType *elem){
    置初值部分
    while (循环控制条件)
        { 循环体 }
    出循环后找到的判定条件及相应处理
}
//出循环的判断条件是i==pos且p指针指向结点不空



### ===========================================================================
Status List_Retrieve(SqListPtr L, int pos, ElemType *elem)
{
    Status s = range_error;
    Ptr p = (*L)->next;         /* 带头结点,移动p指向第一个元素结点*/
    int i = 1;                  /*计数器*/
    while (p && (i < pos))      /* p指向的结点存在,且未到达指定位置*/
    {                           /*条件1防止pos>表长;条件2控制取第pos个, 防pos<1 */
        i++;
        p = p->next;
    }
    if (p && (i == pos))        /*找到指定位置,且该结点存在*/
    {
        *elem = p->data;
        s = sucess;
    }
    return s;
}



### ===========================================================================
查找——按位置查找查找 P.30 算法2.7
循环条件分析:

p = (*L)->next ; i=1;
while (p && i<pos )     { i++;p=p->next;}
    条件1防止pos>表长,条件2控制取第pos个,并防止了pos<1
    
两个条件有6种组合:
1.p== NULL && i<pos     空表且pos>1 或pos>表长+1, range_error
2.p == NULL && i==pos   空表且pos=1或pos=表长+1 , range_error
3.p== NULL && i> pos    空表且pos<1 ,range_error
4.p!=NULL && i<pos      继续循环
5.p!=NULL && i==pos     确定第pos个结点 ,正常出循环,success
6.p!=NULL && i> pos pos<1 ,                     range_error




### ===========================================================================
1查找——按值查找
• 算法思想描述:
1. 初始化:P指针指向线性表第一个结点;位置i=1;操作状态s为错误
2. 只要线性表不空,循环做下面操作
3. 如果待查找数据==当前结点数据,则退出循环;
4. 否则p指针指向下一个结点;位置计算器i增1
5. 循环外面判断p!=NULL,则找到数据,将位置i赋值给pos参数;修改操作状态s为成功;
6. 返回操作状态s



### ===========================================================================
查找——按值查找

Status List_Locate(SqListPtr L, ElemType elem, int *pos)
{
    Status s = range_error;
    Ptr p =(*L)->next;
    int i = 1;
    while (p != NULL)
    {
        if (p->elem == elem)
            break;
        i++;
        p = p->next;
    }
    if (p)
    {
        *pos = i;
        s = success;
    }
}

也可用复合条件将循环改写为:
while (p && p->data != elem) {
    i++;
    p = p-next;
}
