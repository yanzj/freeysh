### ===========================================================================
2       3       4       5       6       7       8
13      38      65      76      27      49      97  
low                     mid                     high
____________________________________________________
0       1       2       3       0       1       2
=========================       =================
L[n1]                           R[n2]
i                               j

### ===========================================================================
void merge(int arr[], int low, int mid, int high)
{
    int i, j, k;
    int n1 = mid - low + 1;
    int n2 = high - mid;
    int L[n1], R[n2];
    
    for (i = 0; i < n1; i++)
        L[i] = arr[low + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    i = 0; j = 0; k = 0;
    
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
            arr[k] = L[i++];
        else
            arr[k] = R[j++];
        
        k++;
    }
    
    while (i < n1)
        arr[k++] = L[i++];
        
    while (j < n2)
        arr[k++] = R[j++];        
        
}



void merge_sort(int arr[], int low, int high)
{
    if (low < high)
    {
        int mid = (low+high)/2;
        merge_sort(arr, low, mid);
        merge_sort(arr, mid+1, high);
        merge(arr, low, mid, high);
    }
}



int main(void)
{
    int arr[] = {2,8,9,10,4,5,6,7};
    int left = 0;
    int right = 7;
    int i;
    merge_sort(arr, left, right);
    printf("hello world\n");
    for (i=0; i<=right; i++)
        printf("%d,", arr[i]);
    return 0;
}
