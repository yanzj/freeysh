### ===========================================================================文件操作：     通过程序操作文件读             文件->内存写             内存->文件FILE *         结构体宏fopen          打开文件函数./file1代表当前目录下的file1文件r代表一只读形式打开fclose(fysh);关闭文件函数  (fysh文件指针将代表文件)fopen(以字符串的形式写文件的路径，读或写或追加)fread(写入内存空间的首地址，一次写入的字节数，最大字节长度，写入文件的地址)int main(void){     FILE *fysh = fopen("./file1", "r");    if (!fysh)    {        perror("fopen");        exit (-1);    }    char buf[64] = {};    size_t ret = fread(buf, 1, 63, fysh);    printf("%s %ld\n", buf, ret);    fclose(fysh);       retrun 0;}###############################################################################===============================================================================写文件fwrite(要写入数据的地址，1次写入多少个字节，要写入字节的长度，写入目的地址)#include <stdio.h>#include <stdlib.h>#include <string.h>int main(void){    FILE *fp = fopen("./file", "w");//'w'如果此文件存在则清空它，否则创建它    if (!fp)                        //'a'不会清空原来的内容，追加到它后面    {        perror("fopen");        exit (-1);    }            fwrite("yushihu", 1, strlen("yushihu"), fp);    fclose(fp);        return 0;}###############################################################################===============================================================================void *malloc(size_t size)void *泛型指针[可以赋给任何类型的指针变量]char *p = malloc(1000);把malloc(1000)的第一个字节的地址赋给pexit (-1);            程序终止栈空间     静态内存分配  (大小是编译时决定的)  自动释放堆空间     动态内存分配  (大小是运行时决定的)  手动释放###############################################################################==============================================================================="hello world!"     在所有字符串还有一个看不见的字符[\0]尾零'\0'               尾零表示一个字符串的结束'h'  4字节"h"  2字节  char *p = "hello world!";printf("%s\n", p);1.当我们写"hello"时，就是告诉编译器，在只读数据段存储6个字符{也包含尾零}每调用一个函数就会压一个栈空间，只读数据段是离栈很远的地方2."hello"表达式的值，表示字符串第一个字符的地址#include <string.h>char *p = "hello";printf("%ld", strlen(p));求字符串的有效字节长度int a1 = atoi("1234");    字符串转换为数字