### ===========================================================================
volatile 关键字（易失的，可变的）
*((uint_32 volatile *)(0x40032810))
此关键字主要用于处理器的寄存器编程！


### ===========================================================================
#define bit0_mask 0b00000001
#define bit1_mask 0b00000010
#define bit2_mask 0b00000100
uchar_var = 0x34;
if ((uchar_var & bit0_mask0) != 0)
if ((uchar_var & bit1_mask1) == 1)

define high4_mask 0b11110000
define low4_mask  0b00001111
ucahr_var = 0x43;
/* extract low 4 bit */
uchar_var = uchar_var & low4_mask;

/* extraxt high 4 bit */
uchar_var = （uchar_var & high4) >> 4;



### ===========================================================================
自增运算符： i++, ++i
int i = 0;
int j = i++;
(i++表达式是加前取值) 运行结果：i=1;j=0

int i = 0;
int j = ++i;
(++i是加后取值)       运行结果：i=1;j=1


*与&的关系：互为逆运算
&取地址运算符，取变量的地址
*指针运算符(间接访问运算符)，取指针变量所指向的内容  


  
### ===========================================================================  
#define SWAP1(a, b) \
{                   \
    int t = a;      \
    a = b;          \
    b = t;          \
}                   

/* SWAP2 这种算法的缺陷为，当a和b的数值很大时，可能出现溢出 */
#define SWAP2(a, b) \
{                   \
a = a+b             \
b = a-b;            \
a = a-b;            \
}			

/* SWAP3 采用按位异或运算，效率是非常高的 */
#define SWAP3(a, b) \
{                   \
a = a^b;            \
b = a^b;            \
a = a^b;            \
}			




### ===========================================================================
