### ===========================================================================
断点(b)和继续执行(c)指令

指令 b 可以在需要地方放置断点，使得程序在指令的位置停止运行，指令格式为 b 断点位置。
其中，断点位置可以是行号，也可以是函数名(指定方式与 l 指令类似)，也可以是地址。
b 10　　　　　　　　//在源代码10行处放置断点
b main　　　　　　　//在main函数开始处放置断点
b *0x80480000　　　//在存放在0x80480000处的指令处放置断点，直接使用地址时需要使用 *地址 的格式 
b 10 if a<10 　　　//可以在断点中加入中断执行的条件，表示当a < 10 时才会中断程序执行



在断点处检查完毕后，可以使用 c 指定继续指令的执行。
使用指令 disable/enable 断点号 可以启用/停用某断点。
使用指令 d 可删除所有的断点，d 1 删除breakpoint 1.

disable/enable    n        //停用/启用编号为n的断点
d                	   //删除所有断点
d    n           	  //删除标号为n的断点





观测点(watch)指令

指令watch可以为某一表达式设置观察点，当程序执行过程中，当表达式的值发生改变时，则 gdb 会中断程序执行，
并显示表达式的变化情况。

watch a　　　　　 //当变量 a 的值发生变化时，中断程序执行
watch -l a　　　　// watch指令指定了 -l 参数时，会将指令所接的表达式的计算结果作为地址，
                     观察该地址处的值的变化情况
rwatch a　　　　  // 当 a 的值被读取时，中断表达式的执行




显示(disp)和打印(p)指令

disp指令(display)可以在每次程序暂定时显示指定变量的值，指令格式为 disp 变量名。若输入的变量为数组名，
则每次显示数组的所有元素，若为结构体，则输出结构体的所有成员的值。

disp temp　　　　　//在每次程序暂停时输出指定的变量的值(确保程序在指定变量的作用域内执行，
                     如某个在特定函数中的局部变量在程序进入该函数执行之前是无法被显示的)
undisplay　　　　　//取消所有disp指定的自动显示变量

p指定(print)同样将变量的值打印出来，用法与diap类似，但结果只显示一次。
除变量外，p指令还可以输出给定寄存器、给定地址处的值。
同时，可以通过一些参数对打印格式进行规定，
如 /x 表示以16进制格式打印值，/t表示以二进制格式打印值。


p $eax　　　　　　   //打印寄存器%eax存储的值，注意使用$标志寄存器名称
p /x ($ebp + 8)　    //以十六进制的格式打印%ebp + 8 的值
p /t 100　　　　　   //以二进制格式输出100的值
p *0x08048000　　    //输出位于0x08048000处的数据(此处实际存放的是机器代码)，
                       注意地址需使用 * 标志，否则会被默认为常数
p *(int *)0xxxxxxxx  //将指定地址处数据按照整数格式输出，这里一般需要指出指针类型方便gdb解释数据



其他显示类info命令

　　info reg　　　　　  //输出所有寄存器的当前值
　　info frame　　　　  //输出栈帧的使用情况
　　info  b n　　　　   //其中 n 为指定的断点号，显示指定断点的状态信息，
                         不加参数 n 时，会显示所有的断点的信息



内存检查(examine)指令

　　x 指令用于检查内存中某一区域的值，指令格式为 ：x fmt address 。
其中address为内存地址的表达式，fmt由 /重复次数+格式化字符+尺寸字符 组成。
格式化字符有o(octal，八进制)，x(hex，十六进制)， d(decimal，十进制)，
u(unsigned decimal，无符号十进制)，t(binary，二进制)，f(float，浮点)，
a(address，地址)，i(instruction，指令)，c(char，字符)，s(string，字符串).
尺寸字符有 b(byte)，h(halfword)， w(word)， g(giant, 8 bytes)

    x /4xb *0xxxxxx　　//将指定地址区域连续的四个字节以十六进制的格式输出，一般内存地址均使用 * 标识




格式化输出(printf)指令

　　该指令的使用方法与C语言中的格式化输出函数相似

    printf" %d , %d \n",X,Y　　//对于两个变量整形X，Y进行输出

　　使用指令whatis可以方便的得知所需对象的类型，如 whatis temp 会显示出temp的类型定义，在调试时有用。





















