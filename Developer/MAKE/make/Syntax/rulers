### ===========================================================================
Makefile,用户可以自定义新的隐含规则，
我们把自定义的隐含规则称为模式规则。
1 模式规则和普通规则相似
2 模式规则的目标有且仅有一个“%”，“%”可匹配任意非空字符。
3 %.o: %.c	表示把任意.c文件编译成.o文件。



### ===========================================================================
### Makefile隐含规则 
隐含规则->1,编译C 程序的隐含规则
"<file_name>.o" 的目标的依赖会自动推导为 "<file_name>.c",并且其生成命令是：
"$(CC) -c $(CPPFLAGS) $(CFLAGS)"
include config.mk
test: $(OBJS)
	gcc -c $(OBJS) -o test
###f1.o: f1.c
###f2.o: f2.c
main.o: main.c
.PHONY: clean
clearn:
	rm -r *.o test

/config.mkk
OBJS=f1.o f2.o
OBJS+=main.o
CFLAGS=-c -Wall -g



### ===========================================================================
### 隐含规则->2,链接object文件的隐含规则 
"<file_name>"目标依赖于"<file_name>.o",
通过运行C编译器来运行链接程序生成(一般是ld)
其生成命令是：
"$(CC) $(LDFLAGS) <file_name>.o"

$(LOADLIBES) $(LDLIBS), 这个规则用于只有一人源文件有效，
同时也对多个objects文件(由不同的源文件生成)的也有效。
例如：
规则 
x: x.o y.o z.o
并且"x.c y.c z.c"都存在，隐含规则将执行下面的命令：
cc -c x.c -o x.o
cc -c y.c -o y.o
cc -c z.c -o z.o
cc x.o y.o z.o -o x

如果没有一个源文件和目标文件的名字相关连，
那么最好写出自己的生成规则，否则隐含规则会报错。

CFLAGS=-Wall -g
CC =gcc
f1: f1.o f2.o main.o
.PHONY: clean
clean:
	rm *.o f1


### ===========================================================================
# rulers 1
%.o: %.cpp
	${CC} ${CFLAGS} ${INCLUDES} -c $< -o $@
%.o: %.c
	${CC} ${CFLAGS} ${INCLUDES} -c $< -o $@	

# rulers 2
.c.o:
	${CC} ${CFLAGS} ${INCLUDES} -c $< -o $@

# rulers 3
.c.o:
	${CC} ${CFLAGS} ${INCLUDES} -c $< 




















