### ===========================================================================

	-Wl,--whole-archive
	-Wl,--no-whole-archive
	-Wl,--start-group
	-Wl,--end-group
这４个都是链接器的选项，所以在编译的时候要用　-Wl.[options] 来传递给链接器，不然编译器会不认得这个选项．
-Wl,--whole-archive　选项解决了编译中长遇到的问题在代码中定义的符号(如函数名)还未使用到之前，链接器
并不会把它加入到链接表中．

这里有１个链接顺序的问题，在command line上面的库会依赖之后的库如果碰到循环链接，-lliba -llibb -lliba,
这样就需要使用 --start-group和--end-group 反复在.a中进行搜索，直到所以未定义的字符都被找到为止，
而不是默认只搜索一次．




### ===========================================================================
-fno-exceptions		
-ffunction-sections
-fdata-sections
-nostartfiles
-Wl,--gc-sections,-Tlinker.ld



### ===========================================================================
-fno-rtti 禁用运行时类型信息
-fno-exceptions 禁用异常机制

一般只有对程序运行效率及资源占用比较看重的场合才会使用, 
如果要做这两个的话最好连libstdc++和其他所有的的c++库都用这两个参数重新编译一遍, 
否则光是你自己的程序禁用了这两个特性, 而别的库依然开着, 效果就大打折扣了



### ===========================================================================
gcc -ffunction-sections -fdata-sections -Wl,–gc-sections 参数详解

有时我们的程序会定义一些暂时使用不上的功能和函数，虽然我们不使用这些功能和函数，
但它们往往会浪费我们的ROM和RAM的空间。这在使用静态库时，体现的更为严重。
有时，我们只使用了静态库仅有的几个功能，但是系统默认会自动把整个静态库全部链接到可执行程序中，
造成可执行程序的大小大大增加。

为了解决前面分析的问题，我们引入了标题中的几个参数。
GCC链接操作是以section作为最小的处理单元，只要一个section中的某个符号被引用，该section就会被加入到可执行程序中去。
因此，GCC在编译时可以使用 -ffunction-sections 和 -fdata-sections 
将每个函数或符号创建为一个sections，其中每个sections名与function或data名保持一致。
而在链接阶段， -Wl,–gc-sections 指示链接器去掉不用的section（其中-wl, 表示后面的参数 -gc-sections 传递给链接器），这样就能减少最终的可执行程序的大小了。

我们常常使用下面的配置启用这个功能：

CFLAGS += -ffunction-sections -fdata-sections
LDFLAGS += -Wl,--gc-sections











### ===========================================================================
 -nostartfiles 

连接的时候不使用标准系统的启动文件。标准系统库通常被使用，除非选项“-nostdlib”和“-nodefaultlibs”被使用。 



### ===========================================================================
-nodefaultlibs

连接的使用不使用标准系统库。只有你指定的库才能够传递给连接器。
与系统库有关的特定的连接选项（例如-static-libgcc 和 -shared-libgcc ）将会被忽略。
标准的启动文件通常会被使用，除非-nostartfiles选项被使用。 

编译器可能会生成memcmp,memset,memcpy和memmove的调用，这些entries通常会被标准库libc中的相关的entries解决。
当这个选项被使用的时候，这些入口点应该通过其他的方法被提供。



### ===========================================================================
-nostdlib

链接的时候不使用标准的系统启动文件和系统库。 没有启动文件和只用你指定的库可以被传递给连接器。
与系统库有关的特定的连接选项（例如-static-libgcc 和 -shared-libgcc ）将会被忽略。
编译器可能会生成memcmp,memset,memcpy和memmove的调用，这些entries通常会被标准库libc中的相关的entries解决。
当这个选项被使用的时候，这些入口点应该通过其他的方法被提供。



### ===========================================================================
-ffunction-sections

如果目标支持任意数目的节（sections），把每个函数和数据放置在输出文件各自的节中（sections）。  
这个函数和数据的名字决定了在输出文件里各自所在节（section）的名字。

在某个系统上使用这个选项，这个系统上的连接器能够执行优化，改善指令空间里面的本地索引。
使用ELF作为目标文件格式的系统和运行在SPARC处理器上的Solaris2系统的连接器有这个选项。
AIX系统的连接器将来可能有这个选项。

当这样做有重要意义的时候才使用这个选项。
当你使用这个选项的时候，汇编器和连接器会生成很大的目标文件和执行文件，整个过程会很慢。
如果你在你的系统上使用了这个选项，就不行在你的系统上使用gprof这个程序。 
当这个选项和-g一起使用时，你再调试的时候可能会遇到问题。 
