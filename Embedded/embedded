##### GNU Arm Embedded Toolchain Developer  
sudo gedit ~/.bashrc

### Linux OS enviroment variable configuration
### ===========================================================================

### GNU Arm Embedded Toolchain
export GCC_HOME=/opt/gcc-arm-none-eabi-7-2018-q2-update-linux/gcc-arm-none-eabi-7-2018-q2-update/
export PATH=$PATH:$GCC_HOME/bin

### JAVA-JDK
export JAVA_HOME=/opt/jdk-8u181-linux-x64/jdk1.8.0_181/
export PATH=$PATH:$JAVA_HOME/bin

### eclipse
export PATH=$PATH:/opt/eclipse-cpp-2018-09-linux-gtk-x86_64/eclipse/


### command
export ysh=$HOME/Documents/ysh/Developer/BASH/command
### ===========================================================================



### ===========================================================================
OpenOCD Install


检查ST-Link版本
OpenOCD支持ST-Link的三个版本，分别是ST-LINK, ST-LINK/V2, ST-LINK/V2-1
配置文件要引用对应的ST-LINK配置，可以通过 /lsusb/ 命令查看所使用的ST-LINK的ID确定版本
版本                  配置文件                       ID
ST-LINK         interface/stlink-v1.cfg         0483:3744
ST-LINK/V2      interface/stlink-v2.cfg         0483:3748
ST-LINK/V2-1    interface/stlink-v2-1.cfg       0483:374b
排除权限问题后，如果还出现open failed错误，那么需要检查ST-LINK版本是否对上了。

openocd -f board/st_nucleo_f4.cfg

sudo apt-get install openocd

◆ openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg

openocd --version

#cd openocd/share/openocd/contrib/
# 60-openocd.rules
# Copy this file to /etc/udev/rules.d/



### ===========================================================================
STLINK-V2 Install

sudo apt-get install libusb-1.0-0-dev git
git clone https://github.com/texane/stlink stlink.git
cd stlink.git
make
	cp st-flash /usr/bin
	cp ~/stlink/etc/udev/rules.d/49-stlinkv2-1.rules /etc/udev/rules.d
             
	◆ 其中OWNER 修改为你的用户名
	===============================
	sudo cp 49-stlinkv2.rules  /etc/udev/rules.d/
	SUBSYSTEM=="usb", ATTR{idVendor}=="0483", ATTR{idProduct}=="3748",  \
	MODE:="0666", SYMLINK+="stlinkv2_%n" ,OWNER="ysh"

	◆ 让系统识别新的规则
	===============================
	sudo udevadm control --reload-rules
	sudo udevadm trigger




### ===========================================================================
eclipse 安装插件

Help-> Install New Software
http://gnuarmeclipse.sourceforge.net/updates




### ===========================================================================
GDB Debugger


1.openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg

2.arm-none-eabi-gdb blink.elf

	(gdb)	target remote localhost:3333
	(gdb)	monitor reset
	(gdb)	monitor halt
	(gdb)	load



### ===========================================================================
串口调试软件安装

sudo apt-get install minicom 
sudo minicom -s
Serial Device: /dev/ttyUSB0



### ===========================================================================
arm-none-eabi-gdb的调试指令


l       list指令的缩写，意为列出当前执行的源代码。
        同时输入指令后重复按回车等效于再次输入上次的指令 
c       continue的缩写，在嵌入式GDB中我们不能使用RUN指令来运行代码，
        相应的我们需要continue指令来运行。
s       step缩写，会进入子函数的单步运行
n       next缩写，即会跳过子函数的单步运行
u       until缩写使用时后方加行号如： u 16 即运行到第16行

p       print缩写，使用时后面加变量名称如：p tmp ，用来显示变量数值
display 使用时后面加变量名称如：display tmp ，用于跟踪变量数值，
        在每次执行停下时会自动显示变量数值。
finish  完成并跳出当前的子函数



b       break缩写，用于在程序中打断点，使用方式有很多种
b 16    在当前低16行代码出加断点。
b i=1   当i等于1时停止，类似于这种条件式断点的方式也是GDB独有的一种强大功能。
b main  在main函数的入口打断点。
i b     info break 缩写，显示当前设置的断点信息。
	    如下面这个查到了在main函数处有两个断点，序号分别为1 和 2。


d break		delet break 缩写，删除所有断点
d break 1   删除序号为1的断点

bt          查看堆栈

q/Ctrl+d    使用q即quit指令或快捷键Ctrl+d来正常退出GDB


在GDB的指令窗口我们输入
(gdb)-		对就是一个 减号，然后回车我们来见证奇迹的时刻


### ===========================================================================
