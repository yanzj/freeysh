###############################################################################
===============================================================================	
Autotools必要的工具
===========================================

autoconf
生成可以自动配置软件源码包，
用于适应多种UNIX类系统的shell脚本工具，
最后生成可执行程序 configure

automake
从Makefile.am文件自动生成Makefile.in的工具。
configure程序使用Makefile.in生成Makefile

libtool
方便生成各种程序库的工具。
=============================================

AC_INIT
 测试程序
 测试函数库
 测试头文件
 测试类型定义
 测试结构
 测试编译器特性
 测试库函数
 测试系统调用
AC_OUTPUT
上面的调用次序只是建议性质的，但我们还是强烈建议不要随意改变对宏调用的次序。



现在就开始修改该文件：
	
$mv configure.scan configure.in
$vim configure.in

修改后的结果如下：
	
#                                -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
 
AC_PREREQ(2.59)
AC_INIT(test, 1.0, normalnotebook@126.com)
AC_CONFIG_SRCDIR([src/ModuleA/apple/core/test.c])
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(test,1.0)
 
# Checks for programs.
AC_PROG_CC
# Checks for libraries.
# FIXME: Replace `main' with a function in `-lpthread':
AC_CHECK_LIB([pthread], [pthread_rwlock_init])
AC_PROG_RANLIB
# Checks for header files.
# Checks for typedefs, structures, and compiler characteristics.
# Checks for library functions.
AC_OUTPUT([Makefile
        src/lib/Makefile
        src/ModuleA/apple/core/Makefile
        src/ModuleA/apple/shell/Makefile
        ])

其中要将AC_CONFIG_HEADER([config.h])修改为：AM_CONFIG_HEADER(config.h), 
并加入AM_INIT_AUTOMAKE(test,1.0)。由于我们的测试程序是基于多线程的程序，
所以要加入AC_PROG_RANLIB，不然运行automake命令时会出错。
在AC_OUTPUT输入要创建的Makefile文件名。


由于我们在程序中使用了读写锁，所以需要对库文件进行检查，
即AC_CHECK_LIB([pthread], [main])，该宏的含义如下：
=======================================================
宏					含义
AC_CHECK_LIB				该宏用来检查　lib库中是否存在指定函数。
(lib,function[,action_if_founc		当测试成功时，执行shell命令　action_if_found或者当
[,action_if_not_found,			action_if_found为空时，在输出变量　LIBS中添加
[,other_libs]]])			-lib   action_if_not_founc 把　-lother_libs 选项
					传给 link命令


其中，LIBS是link的一个选项，详细请参看后续的Makefile文件。
由于我们在程序中使用了读写锁，
所以我们测试pthread库中是否存在pthread_rwlock_init函数。

由于我们是基于deep类型来创建makefile文件，
所以我们需要在四处创建Makefile文件。
即：project目录下，lib目录下，core和shell目录下。

Autoconf提供了很多内置宏来做相关的检测，限于篇幅关系
，我们在这里对其他宏不做详细的解释，具体请参看参考文献1和参考文献2，
　也可参看autoconf信息页。




实战Makefile.am
====================
Makefile.am是一种比Makefile更高层次的规则。
只需指定要生成什么目标，它由什么源文件生成，要安装到什么目录等构成。
表一列出了可执行文件、静态库、头文件和数据文件，
四种书写Makefile.am文件个一般格式。
表 1Makefile.am一般格式

文件类型			书写格式
可执行文件		bin_PROGRAMS=foo
			foo_SOURCES=xxxx.c
			foo_LDADD=
			foo_LDFLAGS
			foo_DEPENDENCIES=

静态库			lib_LIBRARIES=libfoo.a
			foo_a_SOURCES=
			foo_a_LDADD=
			foo_a_LIBadd
			foo_a_LDFLAGS=

头文件			include_HEADERS=foo.h
			

数据文件		data_DATA=data1 data2
			


对于可执行文件和静态库类型，如果只想编译，不想安装到系统中，
可以用noinst_PROGRAMS代替bin_PROGRAMS，noinst_LIBRARIES代替lib_LIBRARIES。



Makefile.am还提供了一些全局变量供所有的目标体使用
Makefile.am中可用的全局变量
===================================================

变量			含义
INCLUDE			比如链接时所需要的头文件
LDADD			比如链接时所需要的库文件
LDFLAGS			比如链接时所需要的库文件选项标志
EXTRA_DIST		源程序和一些默认的文件将自动打入　.tar.gz包。
			其它文件若要进入　.tar.gz包可以用这种办法，
			比如配置文件，数据文件
SUBDIRS			在处理本目录之前要递归处理那些子目录




